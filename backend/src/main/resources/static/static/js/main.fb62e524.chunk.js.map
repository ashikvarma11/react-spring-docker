{"version":3,"sources":["components/EmployeeDetails.tsx","components/EmployeeList.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["EmployeeDetails","isEdit","isAdd","currEmployee","callBackFn","useState","isLoading","setIsLoading","triggerMessage","setTriggerMessage","useForm","defaultValues","register","handleSubmit","watch","formState","errors","marginTop","marginBottom","id","type","required","pattern","onClick","data","ID","URL","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","then","json","setTimeout","loadingText","colorScheme","variant","role","w","maxW","borderWidth","borderRadius","overflow","objectFit","src","EmployeeList","shouldUpdateList","React","empList","setEmpList","setCurrEmployee","refreshState","updateState","forceUpdate","useCallback","modifyOptions","setModifyOptions","useDisclosure","isOpen","onOpen","onClose","useEffect","res","length","minChildWidth","spacingX","spacingY","map","emp","index","boxSize","marginBlock","alt","h","fontSize","align","firstName","lastName","email","color","deleteHandler","mr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb62e524.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n} from \"@chakra-ui/form-control\";\r\nimport { Image } from \"@chakra-ui/image\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Center, Container } from \"@chakra-ui/layout\";\r\nimport React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Employee } from \"../shared/types/Employee\";\r\n\r\n\r\ntype Props = {\r\n  isEdit: boolean;\r\n  isAdd: boolean;\r\n  currEmployee?: Employee;\r\n  callBackFn: Function\r\n}\r\nconst EmployeeDetails: React.FC<Props> = ({isEdit,isAdd,currEmployee,callBackFn}) => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [triggerMessage, setTriggerMessage] = useState<boolean>(false);\r\n  const {register, handleSubmit, watch, formState: { errors } } = useForm<Employee>({defaultValues:currEmployee});\r\n  const SAVED_MESSAGE = 'Saved Successfully';\r\n  const onSubmit = (data:any) => {\r\n    setIsLoading(true);\r\n    const ID = currEmployee?.id;\r\n    const URL = isEdit? `http://localhost:8080/api/employees/${ID}` : 'http://localhost:8080/api/employees';\r\n    fetch(URL,{\r\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept':'*/*'\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(data)// body data type must match \"Content-Type\" header\r\n    }).then(data=>data.json())\r\n    .then(data=>{\r\n      callBackFn();\r\n      setTriggerMessage(true);\r\n      setTimeout(()=>{\r\n        setTriggerMessage(false);\r\n      },2000);\r\n      setIsLoading(false);\r\n    })\r\n  }\r\n  return (\r\n    \r\n    <Container marginTop={10} marginBottom={20}>\r\n      {isEdit || isAdd ? <form>\r\n        <FormControl id=\"fName\">\r\n          <FormLabel>First Name</FormLabel>\r\n          <Input type=\"text\" {...register(\"firstName\", { required: true })} />\r\n        </FormControl>\r\n        <FormControl id=\"lName\">\r\n          <FormLabel>Last Name</FormLabel>\r\n          <Input type=\"text\" {...register(\"lastName\", { required: true })} />\r\n        </FormControl>\r\n        <FormControl id=\"email\">\r\n          <FormLabel>Email</FormLabel>\r\n          <Input type=\"email\" {...register(\"email\", { required: true, pattern:/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/})} />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"submit\" marginTop=\"30\" >\r\n          <Button\r\n          onClick={handleSubmit(onSubmit)}\r\n            isLoading={isLoading}\r\n            loadingText=\"Submitting\"\r\n            colorScheme=\"teal\"\r\n            variant=\"solid\" role=\"button\" w=\"100%\">\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n        <Center marginTop=\"20px\">\r\n        {triggerMessage && SAVED_MESSAGE}\r\n        </Center>\r\n      </form>\r\n      : \r\n      <Box maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n        <Center>\r\n         <Image  objectFit=\"cover\" w=\"100%\"src=\"https://bit.ly/dan-abramov\" />\r\n        </Center>\r\n      </Box> }\r\n    </Container>\r\n  );\r\n};\r\nexport default EmployeeDetails;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Center,\r\n  Image,\r\n  Modal,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalOverlay,\r\n  SimpleGrid,\r\n  Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { Employee } from \"../shared/types/Employee\";\r\nimport EmployeeDetails from \"./EmployeeDetails\";\r\n\r\ntype Props = {\r\n  shouldUpdateList: boolean\r\n}\r\n\r\ntype ModifyOptions = {\r\n  isEdit: boolean;\r\n  isAdd: boolean;\r\n}\r\n\r\nconst EmployeeList: React.FC<Props> = ({shouldUpdateList}) => {\r\n  const [empList, setEmpList] = React.useState<Employee[]>([]);\r\n  const [currEmployee,setCurrEmployee] = React.useState<Employee>();\r\n  const [refreshState, updateState] = React.useState< any |undefined>();\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n  const [modifyOptions,setModifyOptions] = React.useState<ModifyOptions>({ isEdit: false,isAdd:false})\r\n  const NO_EMPLOYEES_MESSAGE = 'No Employees Found. Please Add an Employee';\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const deleteHandler = (emp: any) => {\r\n    const URL = `http://localhost:8080/api/employees/${emp.id}`\r\n    fetch(URL,{\r\n      method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept':'*/*'\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n    }).then(data=>data)\r\n    .then(data=>{\r\n      forceUpdate();\r\n    })\r\n  };\r\n  React.useEffect(() => {\r\n    fetch(\"http://localhost:8080/api/employees\")\r\n      .then((res) => res.json())\r\n      .then((data: Employee[]) => setEmpList(data));\r\n  }, [refreshState,shouldUpdateList]);\r\n\r\n  const afterUpdate = () => {\r\n    forceUpdate();\r\n  }\r\n  return (\r\n    <>\r\n      {empList.length>0 ? <SimpleGrid minChildWidth=\"300px\" spacingX=\"40px\" spacingY=\"20px\">\r\n        {empList.map((emp: Employee, index) => {\r\n          return (\r\n            <Box key={index}>\r\n              <Center>\r\n                <Image\r\n                  boxSize=\"200px\"\r\n                  marginBlock=\"10px\"\r\n                  borderRadius=\"full\"\r\n                  objectFit=\"cover\"\r\n                  src=\"https://bit.ly/dan-abramov\"\r\n                  alt=\"Dan Abramov\"\r\n                  onClick={()=>{ setCurrEmployee(emp);setModifyOptions({...modifyOptions,isEdit:false,isAdd:false}); onOpen()}}\r\n                />\r\n              </Center>\r\n              <Center>\r\n                <Text w=\"100\" h=\"10\" fontSize=\"2xl\" align=\"center\">\r\n                  {emp.firstName} <strong>{emp.lastName}</strong>\r\n                </Text>\r\n              </Center>\r\n              <Center>\r\n                <Text fontSize=\"xl\">{emp.email}</Text>\r\n              </Center>\r\n              <Center>\r\n                <ButtonGroup marginTop=\"30px\">\r\n                  <Button color=\"black\" onClick={()=>{ setCurrEmployee(emp);setModifyOptions({...modifyOptions,isEdit:true,isAdd:false}); onOpen()}}>\r\n                    Edit\r\n                  </Button>\r\n                  <Button color=\"black\" onClick={() => deleteHandler(emp)}>\r\n                    Delete\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Center>\r\n              \r\n            </Box>\r\n          );\r\n        })}\r\n       <Modal isOpen={isOpen} onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n          <EmployeeDetails isEdit={modifyOptions.isEdit} isAdd={modifyOptions.isAdd} currEmployee={currEmployee} callBackFn={afterUpdate}/>\r\n            <ModalFooter>\r\n              <Button  mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </SimpleGrid>\r\n      : <Center marginTop=\"100px\"><strong>{NO_EMPLOYEES_MESSAGE} </strong></Center>}\r\n    </>\r\n  );\r\n};\r\nexport default EmployeeList;\r\n","import \"./App.css\";\nimport React, { useEffect } from \"react\";\n\nimport {\n  Box,\n  Center,\n  ChakraProvider,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport EmployeeDetails from \"./components/EmployeeDetails\";\nconst App: React.FC = () => {\n  \n  const [shouldUpdateList,updateState] = React.useState< any |undefined>(false);\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const afterUpdate = () => {\n    forceUpdate();\n  }\n  return (\n    <ChakraProvider>\n      <Container maxW=\"container.xl\" marginTop={10} marginBottom={20}>\n        <Center>\n        <Box><Text fontSize=\"3xl\" marginBottom=\"10\">Welcome to Employee Management</Text></Box>\n        </Center>\n        <Tabs variant=\"soft-rounded\" colorScheme=\"green\" >\n        <Center>\n          <TabList>\n            <Tab>Employee Directory</Tab>\n            <Tab>Add Employee</Tab>\n          </TabList>\n        </Center>\n          <TabPanels>\n            <TabPanel>\n              <EmployeeList shouldUpdateList={shouldUpdateList}/>\n            </TabPanel>\n            <TabPanel>\n              <EmployeeDetails isEdit={false} isAdd={true} callBackFn={afterUpdate}/>\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Container>\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}